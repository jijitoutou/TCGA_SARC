#[1] "AUC of 1-y OS = 0.798 [0.675–0.920]"
#[2] "AUC of 3-y OS = 0.746 [0.658–0.835]"
#[3] "AUC of 5-y OS = 0.726 [0.618–0.835]"
time_ROC.res1<-data.frame(TPR=time_ROC$TP[,1], #获取1年的ROC的TP
FPR=time_ROC$FP[,1])
time_ROC.res1$times=rep('1', nrow(time_ROC.res1))
time_ROC.res3<-data.frame(TPR=time_ROC$TP[,2], #获取3年的ROC的TP
FPR=time_ROC$FP[,2])
time_ROC.res3$times=rep('3', nrow(time_ROC.res3))
time_ROC.res5<-data.frame(TPR=time_ROC$TP[,3], #获取5年的ROC的TP
FPR=time_ROC$FP[,3])
time_ROC.res5$times=rep('5', nrow(time_ROC.res5))
res=rbind(time_ROC.res1, time_ROC.res3, time_ROC.res5)
ROC_MYX=ggplot(res, aes(x=FPR, y=TPR, color=factor(times, levels=c('1', '3', '5') ))) +
geom_line(size=1)+
labs(x="1-Specificity", y="Sensitivity")+ #横纵坐标的名字
labs(color=NULL,fill=NULL)+
scale_color_manual(values=c('#4DBBD5FF', 'gold', '#00A087FF'),
labels= label)+
geom_ribbon(aes(ymin = 0, ymax = TPR, fill=factor(times, levels=c('1', '3', '5'))), show.legend = FALSE, alpha=0.1,outline.type="upper")+ #填充线下面积，不要图例、下方边界
scale_fill_manual(values=c('#00BEC3', '#F9F932', '#00BFFF'))+ #填充面积设置透明度
#  scale_x_continuous(labels = scales::percent_format(accuracy = 1))+
#  scale_y_continuous(labels = scales::percent_format(accuracy = 1))+ #百分比形式的横纵坐标
geom_abline(slope = 1, size=1, intercept = 0, linetype=5,col="grey70")+ #增加一个对角线，如果ROC曲线在对角线的左上边，就说明是还可以的
theme_bw()+
theme(
panel.border = element_rect(colour = "black", fill=NA),
legend.position = c(0.9,0.1),
legend.justification =  c(0.9,0.1),
axis.text.x = element_text(vjust = 0.5, color="black", #居中对齐，ticks长度，数字到标签的距离
margin=unit(c(0.2,0.2,0.2,0.2), "cm"), size=8),
axis.text.y = element_text(angle = 90, hjust = 0.5, color="black", #纵坐标的数字旋转90°
margin=unit(c(0.2,0.2,0.2,0.2), "cm"), size=8),
axis.title.x=element_text(size=8,color="black"),
axis.title.y=element_text(size=8,color="black"),
axis.ticks.length=unit(0.2, "cm"),
legend.background = element_rect(linetype = 1, size = 0.5, colour = 1, fill=NA),
#legend.key = element_blank() #图例线条后面的背景如果拿掉看不清，所以我注释掉了
)
ROC_MYX
cairo_pdf(filename='HT.pdf',height=24,width=16)
ggarrange(surv_LMS,ROC_LMS,surv_DLP,ROC_DLP, surv_UPS,ROC_UPS,surv_MYX,ROC_MYX,ncol=4,nrow=2,labels = c('A','','B','','C','','D',''))
dev.off()
surv_UPS,ROC_UPS,surv_MYX,ROC_MYX,ncol=4,nrow=2,labels = c('A','','B','','C','','D',''))
ggarrange(surv_LMS,ROC_LMS,surv_DLP,ROC_DLP, surv_UPS,ROC_UPS,surv_MYX,ROC_MYX,ncol=4,nrow=2,labels = c('A','','B','','C','','D',''))
library(dplyr)
load('counts.Rdata')
load("exprSet_by_group_tpm.Rdata")
load("clinical.Rdata")
exp=as.data.frame(t(Tumour_sample))
sample= substring(rownames(exp),1,15)
exp=cbind(sample,exp)
exp=as.data.frame(t(Tumour_sample))
sample= substring(rownames(exp),1,15)
exp=cbind(sample,exp)
#Onlly keep 01A if one patient have multiple samples
exp=exp[order(exp$sample,decreasing = F),]
table(duplicated(exp$sample)) #No duplicated samples
index <- duplicated(exp$sample)
exp= exp[!index,]
table(duplicated(exp$sample)) #No duplicated samples
exp$sample= substring(exp$sample,1,12)
table(duplicated(exp$sample)) #4 duplicated samples
#FALSE  TRUE
#  259     4
index <- duplicated(exp$sample)
exp= exp[!index,]
table(duplicated(exp$sample)) #No duplicated samples
clin_expr <- clinical %>%inner_join(exp,by = c("bcr_patient_barcode" = "sample")) #match clinical information with expression matrix
rownames(clin_expr)= clin_expr$bcr_patient_barcode
clin_expr= clin_expr[,-1]
clin_expr$status=as.numeric(clin_expr$status)
clin_expr$time=as.numeric(clin_expr$time)
clin_expr$time= clin_expr$time/365.25
status= clin_expr[,1:2]#survival time and event
expr= clin_expr[,-1:-(ncol(clinical)-1)]
clinical= clin_expr[,1:(ncol(clinical)-1)]
expr[,1:ncol(expr)] <- lapply(expr[,1:ncol(expr)], function(x) as.numeric(as.character(x)))
str(expr)
tpm=expr[,names]
#TPM matrix for CIBERSORT
dat=as.data.frame(t(tpm))
symbol=rownames(dat)
out=cbind(symbol, dat)
write.table(out, file = "normalize.txt", row.names = FALSE, quote=F, sep = "\t")
log2tpm= as.data.frame(t(log2(expr +1) ))
write.csv(log2tpm, file = "log2tpm.csv", row.names = TRUE)
#log transformation
norm_log<-matrix(data = NA, nrow =nrow(dat), ncol = ncol(dat), byrow = TRUE, dimnames = NULL)
for (i in 1: nrow(dat)){
for (j in 1: ncol(dat)){
norm_log[i,j]<-log(dat[i,j]+1)/log(2)
}
}
expr= as.data.frame(t(limma::normalizeBetweenArrays(norm_log,method= "quantile")))
colnames(expr)=colnames(tpm)
rownames(expr)=rownames(expr)
clin=clin[match(rownames(clinical),clin$bcr_patient_barcode),]
write.xlsx(clin, 'clinical_origin.xlsx')
library(openxlsx)
library(openxlsx)
write.xlsx(clin, 'clinical_origin.xlsx')
write.xlsx(clinical, 'clinical.xlsx',rowNames=TRUE)
save(clinical, clin, status, tpm, log2tpm,expr,names, file='tpm.Rdata')
load('tpm.Rdata')
#summary table of clinical variable
a=gtsummary::tbl_summary	(clinical[,3:ncol(clinical)],
statistic = list(colnames(clinical)[3] ~ "{mean} ({sd})"),
digits = list(colnames(clinical)[3] ~ c(2, 2),
colnames(clinical)[4] ~ c(0, 2),
colnames(clinical)[5] ~ c(0, 2),
colnames(clinical)[6] ~ c(0, 2),
colnames(clinical)[7] ~ c(0, 2),
colnames(clinical)[8] ~ c(0, 2),
colnames(clinical)[9] ~ c(0, 2),
colnames(clinical)[10] ~ c(0, 2),
Radiation_therapy ~ c(0, 2),
R_classification ~ c(0, 2)
)
)
summary= as.data.frame(a[["table_body"]])
write.xlsx(summary,file='summary.xlsx')
library(openxlsx)
load("tpm.Rdata")
gene=read.xlsx('gene1.xlsx') #symbol of 105 OS-related IRGs
sameGene=intersect(as.vector(gene[,1]), colnames(expr))
setdiff(as.vector(gene[,1]), colnames(expr))
exp=expr[,sameGene] #expression matrix of 105 OS-related IRGs
colnames(exp)=gsub('-','_',colnames(exp))
unicox=cbind(status,exp)
covariates <- colnames(unicox)[3:ncol(unicox)]
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('Surv(time, status)~', x)))
univ_models <- lapply( univ_formulas, function(x){coxph(x, data = unicox)})
library(survival)
library(openxlsx)
load("tpm.Rdata")
gene=read.xlsx('gene1.xlsx') #symbol of 105 OS-related IRGs
sameGene=intersect(as.vector(gene[,1]), colnames(expr))
setdiff(as.vector(gene[,1]), colnames(expr))
exp=expr[,sameGene] #expression matrix of 105 OS-related IRGs
colnames(exp)=gsub('-','_',colnames(exp))
unicox=cbind(status,exp)
covariates <- colnames(unicox)[3:ncol(unicox)]
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('Surv(time, status)~', x)))
univ_models <- lapply( univ_formulas, function(x){coxph(x, data = unicox)})
univ_results <- lapply(univ_models,
function(x){
cox <- summary(x)
#获取p值
p.value<- cox$coefficients[,5]
#获取HR
HR <- sprintf("%.03f", cox$coefficients[,2])
#获取95%置信区间
CI_L<- sprintf("%.03f", cox$conf.int[,3])
CI_U <- sprintf("%.03f", cox$conf.int[,4])
HR_CI <- paste0(HR, " [",
CI_L, "–", CI_U, "]")
res<-c(HR,HR_CI,CI_L, CI_U, p.value)
names(res)<-c("HR", "HR [95% CI for HR]", "CI_L", "CI_U","p")
return(res)
})
Uni_cox <- as.data.frame(t(as.data.frame(univ_results, check.names = FALSE)))
Characteristics =rownames(Uni_cox)
Uni_cox=cbind(Characteristics, Uni_cox)
Uni_cox$p=as.numeric(Uni_cox$p)
View(Uni_cox)
write.xlsx(Uni_cox, "uni_gene_0.1.xlsx", rowNames=FALSE) #save as xlsx file
unicox_result= Uni_cox[which(Uni_cox$p<0.05), ]
unicox_result = unicox_result[order(unicox_result[,"p"], decreasing=F),]#order in accordance with p-value
unicox_gene= unicox_result$Characteristics
#Adverse/favourable
unicox_result$Type=as.factor(ifelse(unicox_result$HR<1,'Favourable gene', 'Adverse gene'))
save(status, exp, unicox_gene, unicox_result, file="unicox_gene_normtpm.Rdata")
unicox_result = unicox_result[order(unicox_result[,"p"], decreasing=T),]#按显著性排序
unicox_result$p=ifelse(unicox_result$p <0.001,'p < 0.001', sprintf("%.04f",unicox_result$p)) #p<0.001显示p<0.001，否则保留4位小数
View(unicox_result)
write.xlsx(unicox_result, "uni_gene_result_0.1.xlsx", rowNames=FALSE) #save as xlsx file
View(Uni_cox)
View(Uni_cox)
View(unicox_result)
View(unicox)
View(univ_results)
View(unicox_result)
library(openxlsx)
load("tpm.Rdata")
gene=read.xlsx('gene1.xlsx') #symbol of 105 OS-related IRGs
sameGene=intersect(as.vector(gene[,1]), colnames(expr))
setdiff(as.vector(gene[,1]), colnames(expr))
View(clinical)
library(dplyr)
load("exprSet_by_group.Rdata")
load("clinical.Rdata")
exp=as.data.frame(t(Tumour_sample))
sample= substring(rownames(exp),1,15)
exp=cbind(sample,exp)
#Onlly keep 01A if one patient have multiple samples
exp=exp[order(exp$sample,decreasing = F),]
table(duplicated(exp$sample)) #No duplicated samples
index <- duplicated(exp$sample)
exp= exp[!index,]
table(duplicated(exp$sample)) #No duplicated samples
exp$sample= substring(exp$sample,1,12)
table(duplicated(exp$sample)) #4 duplicated samples
#FALSE  TRUE
#  259     4
index <- duplicated(exp$sample)
exp= exp[!index,]
table(duplicated(exp$sample)) #No duplicated samples
clin_expr <- clinical %>%inner_join(exp,by = c("bcr_patient_barcode" = "sample")) #match clinical information with expression matrix
rownames(clin_expr)= clin_expr$bcr_patient_barcode
clin_expr= clin_expr[,-1]
clin_expr$status=as.numeric(clin_expr$status)
clin_expr$time=as.numeric(clin_expr$time)
clin_expr$time= clin_expr$time/365.25
status= clin_expr[,1:2]#survival time and event
expr= clin_expr[,-1:-(ncol(clinical)-1)]
clinical= clin_expr[,1:(ncol(clinical)-1)]
expr[,1:ncol(expr)] <- lapply(expr[,1:ncol(expr)], function(x) as.numeric(as.character(x)))
str(expr)
Tumour=as.data.frame(t(expr))
#counts = Tumour[apply(Tumour, 1, function(x) sum(x > 1) > 24), ]#Keep gene which expressed in 25 or more patients
names=rownames(counts)#The TPM matrix will keep the same gene
clin=clin[match(rownames(clinical),clin$bcr_patient_barcode),]
write.xlsx(clin, 'clinical_origin.xlsx')
write.xlsx(clinical, 'clinical.xlsx',rowNames=TRUE)
save(clinical, clin, status, counts,expr,names, file='counts.Rdata')
library(dplyr)
load('counts.Rdata')
load("exprSet_by_group_tpm.Rdata")
load("clinical.Rdata")
exp=as.data.frame(t(Tumour_sample))
sample= substring(rownames(exp),1,15)
exp=cbind(sample,exp)
exp=as.data.frame(t(Tumour_sample))
sample= substring(rownames(exp),1,15)
exp=cbind(sample,exp)
#Onlly keep 01A if one patient have multiple samples
exp=exp[order(exp$sample,decreasing = F),]
table(duplicated(exp$sample)) #No duplicated samples
index <- duplicated(exp$sample)
exp= exp[!index,]
table(duplicated(exp$sample)) #No duplicated samples
exp$sample= substring(exp$sample,1,12)
table(duplicated(exp$sample)) #4 duplicated samples
#FALSE  TRUE
#  259     4
index <- duplicated(exp$sample)
exp= exp[!index,]
table(duplicated(exp$sample)) #No duplicated samples
clin_expr <- clinical %>%inner_join(exp,by = c("bcr_patient_barcode" = "sample")) #match clinical information with expression matrix
rownames(clin_expr)= clin_expr$bcr_patient_barcode
clin_expr= clin_expr[,-1]
clin_expr$status=as.numeric(clin_expr$status)
clin_expr$time=as.numeric(clin_expr$time)
clin_expr$time= clin_expr$time/365.25
status= clin_expr[,1:2]#survival time and event
expr= clin_expr[,-1:-(ncol(clinical)-1)]
clinical= clin_expr[,1:(ncol(clinical)-1)]
expr[,1:ncol(expr)] <- lapply(expr[,1:ncol(expr)], function(x) as.numeric(as.character(x)))
str(expr)
tpm=expr[,names]
#TPM matrix for CIBERSORT
dat=as.data.frame(t(tpm))
symbol=rownames(dat)
out=cbind(symbol, dat)
write.table(out, file = "normalize.txt", row.names = FALSE, quote=F, sep = "\t")
log2tpm= as.data.frame(t(log2(expr +1) ))
write.csv(log2tpm, file = "log2tpm.csv", row.names = TRUE)
#log transformation
norm_log<-matrix(data = NA, nrow =nrow(dat), ncol = ncol(dat), byrow = TRUE, dimnames = NULL)
for (i in 1: nrow(dat)){
for (j in 1: ncol(dat)){
norm_log[i,j]<-log(dat[i,j]+1)/log(2)
}
}
expr= as.data.frame(t(limma::normalizeBetweenArrays(norm_log,method= "quantile")))
colnames(expr)=colnames(tpm)
rownames(expr)=rownames(expr)
clin=clin[match(rownames(clinical),clin$bcr_patient_barcode),]
library(openxlsx)
write.xlsx(clin, 'clinical_origin.xlsx')
write.xlsx(clinical, 'clinical.xlsx',rowNames=TRUE)
save(clinical, clin, status, tpm, log2tpm,expr,names, file='tpm.Rdata')
load('tpm.Rdata')
#summary table of clinical variable
a=gtsummary::tbl_summary	(clinical[,3:ncol(clinical)],
statistic = list(colnames(clinical)[3] ~ "{mean} ({sd})"),
digits = list(colnames(clinical)[3] ~ c(2, 2),
colnames(clinical)[4] ~ c(0, 2),
colnames(clinical)[5] ~ c(0, 2),
colnames(clinical)[6] ~ c(0, 2),
colnames(clinical)[7] ~ c(0, 2),
colnames(clinical)[8] ~ c(0, 2),
colnames(clinical)[9] ~ c(0, 2),
colnames(clinical)[10] ~ c(0, 2),
Radiation_therapy ~ c(0, 2),
R_classification ~ c(0, 2)
)
)
summary= as.data.frame(a[["table_body"]])
write.xlsx(summary,file='summary.xlsx')
library(openxlsx)
load("tpm.Rdata")
gene=read.xlsx('gene1.xlsx') #symbol of 105 OS-related IRGs
sameGene=intersect(as.vector(gene[,1]), colnames(expr))
setdiff(as.vector(gene[,1]), colnames(expr))
exp=expr[,sameGene] #expression matrix of 105 OS-related IRGs
colnames(exp)=gsub('-','_',colnames(exp))
unicox=cbind(status,exp)
covariates <- colnames(unicox)[3:ncol(unicox)]
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('Surv(time, status)~', x)))
univ_models <- lapply( univ_formulas, function(x){coxph(x, data = unicox)})
univ_results <- lapply(univ_models,
function(x){
cox <- summary(x)
#获取p值
p.value<- cox$coefficients[,5]
#获取HR
HR <- sprintf("%.03f", cox$coefficients[,2])
#获取95%置信区间
CI_L<- sprintf("%.03f", cox$conf.int[,3])
CI_U <- sprintf("%.03f", cox$conf.int[,4])
HR_CI <- paste0(HR, " [",
CI_L, "–", CI_U, "]")
res<-c(HR,HR_CI,CI_L, CI_U, p.value)
names(res)<-c("HR", "HR [95% CI for HR]", "CI_L", "CI_U","p")
return(res)
})
Uni_cox <- as.data.frame(t(as.data.frame(univ_results, check.names = FALSE)))
Characteristics =rownames(Uni_cox)
Uni_cox=cbind(Characteristics, Uni_cox)
Uni_cox$p=as.numeric(Uni_cox$p)
View(Uni_cox)
write.xlsx(Uni_cox, "uni_gene_0.1.xlsx", rowNames=FALSE) #save as xlsx file
unicox_result= Uni_cox[which(Uni_cox$p<0.05), ]
unicox_result = unicox_result[order(unicox_result[,"p"], decreasing=F),]#order in accordance with p-value
unicox_gene= unicox_result$Characteristics
#Adverse/favourable
unicox_result$Type=as.factor(ifelse(unicox_result$HR<1,'Favourable gene', 'Adverse gene'))
save(status, exp, unicox_gene, unicox_result, file="unicox_gene_normtpm.Rdata")
unicox_result = unicox_result[order(unicox_result[,"p"], decreasing=T),]#按显著性排序
unicox_result$p=ifelse(unicox_result$p <0.001,'p < 0.001', sprintf("%.04f",unicox_result$p)) #p<0.001显示p<0.001，否则保留4位小数
View(unicox_result)
write.xlsx(unicox_result, "uni_gene_result_0.1.xlsx", rowNames=FALSE) #save as xlsx file
View(gene)
library(dplyr)
load('counts.Rdata')
load("exprSet_by_group_tpm.Rdata")
load("clinical.Rdata")
library(dplyr)
load("exprSet_by_group.Rdata")
load("clinical.Rdata")
exp=as.data.frame(t(Tumour_sample))
sample= substring(rownames(exp),1,15)
exp=cbind(sample,exp)
#Onlly keep 01A if one patient have multiple samples
exp=exp[order(exp$sample,decreasing = F),]
table(duplicated(exp$sample)) #No duplicated samples
index <- duplicated(exp$sample)
exp= exp[!index,]
table(duplicated(exp$sample)) #No duplicated samples
exp$sample= substring(exp$sample,1,12)
table(duplicated(exp$sample)) #4 duplicated samples
#FALSE  TRUE
#  259     4
index <- duplicated(exp$sample)
exp= exp[!index,]
table(duplicated(exp$sample)) #No duplicated samples
clin_expr <- clinical %>%inner_join(exp,by = c("bcr_patient_barcode" = "sample")) #match clinical information with expression matrix
rownames(clin_expr)= clin_expr$bcr_patient_barcode
clin_expr= clin_expr[,-1]
clin_expr$status=as.numeric(clin_expr$status)
clin_expr$time=as.numeric(clin_expr$time)
clin_expr$time= clin_expr$time/365.25
status= clin_expr[,1:2]#survival time and event
expr= clin_expr[,-1:-(ncol(clinical)-1)]
clinical= clin_expr[,1:(ncol(clinical)-1)]
expr[,1:ncol(expr)] <- lapply(expr[,1:ncol(expr)], function(x) as.numeric(as.character(x)))
str(expr)
Tumour=as.data.frame(t(expr))
#counts = Tumour[apply(Tumour, 1, function(x) sum(x > 1) > 24), ]#Keep gene which expressed in 25 or more patients
names=rownames(counts)#The TPM matrix will keep the same gene
counts=Tumour
names=rownames(counts)#The TPM matrix will keep the same gene
clin=clin[match(rownames(clinical),clin$bcr_patient_barcode),]
write.xlsx(clin, 'clinical_origin.xlsx')
write.xlsx(clinical, 'clinical.xlsx',rowNames=TRUE)
save(clinical, clin, status, counts,expr,names, file='counts.Rdata')
library(dplyr)
load('counts.Rdata')
load("exprSet_by_group_tpm.Rdata")
load("clinical.Rdata")
exp=as.data.frame(t(Tumour_sample))
sample= substring(rownames(exp),1,15)
exp=cbind(sample,exp)
exp=as.data.frame(t(Tumour_sample))
sample= substring(rownames(exp),1,15)
exp=cbind(sample,exp)
#Onlly keep 01A if one patient have multiple samples
exp=exp[order(exp$sample,decreasing = F),]
table(duplicated(exp$sample)) #No duplicated samples
index <- duplicated(exp$sample)
exp= exp[!index,]
table(duplicated(exp$sample)) #No duplicated samples
exp$sample= substring(exp$sample,1,12)
table(duplicated(exp$sample)) #4 duplicated samples
#FALSE  TRUE
#  259     4
index <- duplicated(exp$sample)
exp= exp[!index,]
table(duplicated(exp$sample)) #No duplicated samples
clin_expr <- clinical %>%inner_join(exp,by = c("bcr_patient_barcode" = "sample")) #match clinical information with expression matrix
rownames(clin_expr)= clin_expr$bcr_patient_barcode
clin_expr= clin_expr[,-1]
clin_expr$status=as.numeric(clin_expr$status)
clin_expr$time=as.numeric(clin_expr$time)
clin_expr$time= clin_expr$time/365.25
status= clin_expr[,1:2]#survival time and event
expr= clin_expr[,-1:-(ncol(clinical)-1)]
clinical= clin_expr[,1:(ncol(clinical)-1)]
expr[,1:ncol(expr)] <- lapply(expr[,1:ncol(expr)], function(x) as.numeric(as.character(x)))
str(expr)
tpm=expr[,names]
#TPM matrix for CIBERSORT
dat=as.data.frame(t(tpm))
symbol=rownames(dat)
out=cbind(symbol, dat)
write.table(out, file = "normalize.txt", row.names = FALSE, quote=F, sep = "\t")
log2tpm= as.data.frame(t(log2(expr +1) ))
write.csv(log2tpm, file = "log2tpm.csv", row.names = TRUE)
#log transformation
norm_log<-matrix(data = NA, nrow =nrow(dat), ncol = ncol(dat), byrow = TRUE, dimnames = NULL)
for (i in 1: nrow(dat)){
for (j in 1: ncol(dat)){
norm_log[i,j]<-log(dat[i,j]+1)/log(2)
}
}
expr= as.data.frame(t(limma::normalizeBetweenArrays(norm_log,method= "quantile")))
colnames(expr)=colnames(tpm)
rownames(expr)=rownames(expr)
clin=clin[match(rownames(clinical),clin$bcr_patient_barcode),]
library(openxlsx)
write.xlsx(clin, 'clinical_origin.xlsx')
write.xlsx(clinical, 'clinical.xlsx',rowNames=TRUE)
save(clinical, clin, status, tpm, log2tpm,expr,names, file='tpm.Rdata')
load('tpm.Rdata')
#summary table of clinical variable
a=gtsummary::tbl_summary	(clinical[,3:ncol(clinical)],
statistic = list(colnames(clinical)[3] ~ "{mean} ({sd})"),
digits = list(colnames(clinical)[3] ~ c(2, 2),
colnames(clinical)[4] ~ c(0, 2),
colnames(clinical)[5] ~ c(0, 2),
colnames(clinical)[6] ~ c(0, 2),
colnames(clinical)[7] ~ c(0, 2),
colnames(clinical)[8] ~ c(0, 2),
colnames(clinical)[9] ~ c(0, 2),
colnames(clinical)[10] ~ c(0, 2),
Radiation_therapy ~ c(0, 2),
R_classification ~ c(0, 2)
)
)
summary= as.data.frame(a[["table_body"]])
write.xlsx(summary,file='summary.xlsx')
library(openxlsx)
load("tpm.Rdata")
gene=read.xlsx('gene1.xlsx') #symbol of 105 OS-related IRGs
sameGene=intersect(as.vector(gene[,1]), colnames(expr))
setdiff(as.vector(gene[,1]), colnames(expr))
exp=expr[,sameGene] #expression matrix of 105 OS-related IRGs
colnames(exp)=gsub('-','_',colnames(exp))
unicox=cbind(status,exp)
covariates <- colnames(unicox)[3:ncol(unicox)]
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('Surv(time, status)~', x)))
univ_models <- lapply( univ_formulas, function(x){coxph(x, data = unicox)})
univ_results <- lapply(univ_models,
function(x){
cox <- summary(x)
#获取p值
p.value<- cox$coefficients[,5]
#获取HR
HR <- sprintf("%.03f", cox$coefficients[,2])
#获取95%置信区间
CI_L<- sprintf("%.03f", cox$conf.int[,3])
CI_U <- sprintf("%.03f", cox$conf.int[,4])
HR_CI <- paste0(HR, " [",
CI_L, "–", CI_U, "]")
res<-c(HR,HR_CI,CI_L, CI_U, p.value)
names(res)<-c("HR", "HR [95% CI for HR]", "CI_L", "CI_U","p")
return(res)
})
Uni_cox <- as.data.frame(t(as.data.frame(univ_results, check.names = FALSE)))
Characteristics =rownames(Uni_cox)
Uni_cox=cbind(Characteristics, Uni_cox)
Uni_cox$p=as.numeric(Uni_cox$p)
View(Uni_cox)
write.xlsx(Uni_cox, "uni_gene_0.1.xlsx", rowNames=FALSE) #save as xlsx file
unicox_result= Uni_cox[which(Uni_cox$p<0.05), ]
unicox_result = unicox_result[order(unicox_result[,"p"], decreasing=F),]#order in accordance with p-value
unicox_gene= unicox_result$Characteristics
#Adverse/favourable
unicox_result$Type=as.factor(ifelse(unicox_result$HR<1,'Favourable gene', 'Adverse gene'))
save(status, exp, unicox_gene, unicox_result, file="unicox_gene_normtpm.Rdata")
unicox_result = unicox_result[order(unicox_result[,"p"], decreasing=T),]#按显著性排序
unicox_result$p=ifelse(unicox_result$p <0.001,'p < 0.001', sprintf("%.04f",unicox_result$p)) #p<0.001显示p<0.001，否则保留4位小数
View(unicox_result)
write.xlsx(unicox_result, "uni_gene_result_0.1.xlsx", rowNames=FALSE) #save as xlsx file
View(gene)
View(Uni_cox)
